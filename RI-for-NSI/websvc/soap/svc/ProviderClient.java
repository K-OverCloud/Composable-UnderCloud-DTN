
package com.netmng.websvc.soap.svc;
 
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */
/*import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeFactory;*/

/*import com.netmng.websvc.soap.param.types.ServiceExceptionType;*/
/*import com.netmng.websvc.soap.svc.Provider;
import com.netmng.websvc.soap.svc.param.provider.QueryConfirmed;
import com.netmng.websvc.soap.svc.param.provider.Reserve;
import com.netmng.websvc.soap.svc.point2point.p2p.DirectionalityType;
import com.netmng.websvc.soap.svc.provider.ServiceException;*/


/*import SDArchive.ServiceDescriptionUtilty;*/
import com.sun.xml.internal.ws.developer.JAXWSProperties;
/*import com.sun.xml.ws.api.message.Headers;
import com.sun.xml.ws.developer.WSBindingProvider;*/

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.Duration;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Holder;
/*import org.ogf.schemas.nsi._2013._07.connection.requester.ServiceException;
import org.ogf.schemas.nsi._2013._07.connection.types.ReservationRequestCriteriaType;
import org.ogf.schemas.nsi._2013._07.connection.types.ScheduleType;
import org.ogf.schemas.nsi._2013._07.framework.headers.CommonHeaderType;
import org.ogf.schemas.nsi._2013._07.services.point2point.EthernetVlanType;
import org.ogf.schemas.nsi._2013._07.services.types.DirectionalityType;
import org.ogf.schemas.nsi._2013._07.services.types.StpType;*/
/*import com.netmng.websvc.soap.svc.requester.ServiceException;*/
import com.netmng.websvc.soap.param.types.ReservationRequestCriteriaType;
import com.netmng.websvc.soap.param.types.ReserveType;
import com.netmng.websvc.soap.param.types.ScheduleType;
import com.netmng.websvc.soap.svc.header.CommonHeaderType;
import com.netmng.websvc.soap.svc.services.point2point.EthernetVlanType;
import com.netmng.websvc.soap.svc.services.types.DirectionalityType;
import com.netmng.websvc.soap.svc.services.types.StpType;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/*import testclient.TestClient;*/

import com.sun.xml.bind.marshaller.CharacterEscapeHandler;



/**
 * This class was generated by Apache CXF 2.2.12
 * Thu Mar 29 19:20:38 KST 2012
 * Generated source version: 2.2.12
 * 
 */


public class ProviderClient {
	public static void main(String args[]) throws	com.netmng.websvc.soap.svc.provider.ServiceException,
													com.netmng.websvc.soap.param._interface.ServiceException{
		try {
            Holder cid = new Holder("urn:uuid:" + UUID.randomUUID().toString());
            String gid = "urn:uuid:" + UUID.randomUUID().toString();
            String description = "TEST REQUESTER!";
            ReservationRequestCriteriaType criteria = new ReservationRequestCriteriaType();
            ScheduleType schedule = new ScheduleType();
            try {
                Date startTime = new Date();
                GregorianCalendar startTimeGregorian = new GregorianCalendar();
                startTimeGregorian.setTime(startTime);
                XMLGregorianCalendar startTimeXMLGregorian = DatatypeFactory.newInstance().newXMLGregorianCalendar(startTimeGregorian);
                Duration sDuration = DatatypeFactory.newInstance().newDuration(true, 0, 0, 0, 0, 0, 0);
                startTimeXMLGregorian.add(sDuration);
                schedule.setStartTime(startTimeXMLGregorian);
                
                Date endTime = new Date();
                GregorianCalendar endTimeGregorian = new GregorianCalendar();
                endTimeGregorian.setTime(endTime);
                XMLGregorianCalendar endTimeXMLGregorian = DatatypeFactory.newInstance().newXMLGregorianCalendar(endTimeGregorian);
                Duration dDuration = DatatypeFactory.newInstance().newDuration(true, 0, 0, 0, 1, 0, 0);
                endTimeXMLGregorian.add(dDuration);
                schedule.setEndTime(endTimeXMLGregorian);
            } catch (DatatypeConfigurationException ex) {
            	System.out.println("=====>> DatatypeConfigurationException : ");
            	ex.printStackTrace();
                /*Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
            }
            criteria.setSchedule(schedule);
            criteria.setServiceType("http://services.ogf.org/nsi/2013/07/descriptions/EVTS.A-GOLE");
            criteria.setVersion(0);
            
            /*ServiceDescriptionUtilty xdu = new ServiceDescriptionUtilty();*/
            
            /*StpType sstp = new StpType();
            sstp.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
            sstp.setLocalId("DJ-1");

            StpType dstp = new StpType(); 
            dstp.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
            dstp.setLocalId("SE-1");*/
            
            /*com.netmng.websvc.soap.svc.point2point.p2p.ObjectFactory of = new com.netmng.websvc.soap.svc.point2point.p2p.ObjectFactory();
            EthernetVlanType evt = xdu.getEVTS();
            evt.setCapacity(200);
            evt.setSourceSTP(sstp);
            evt.setDestSTP(dstp);
            evt.setSourceVLAN(1780);
            evt.setDestVLAN(1780);
            JAXBElement<EthernetVlanType> evts = of.createEvts(evt);*/
            /*
            EthernetVlanType evt = new EthernetVlanType();
            evt.setCapacity(200);
	            StpType sourceSTP = new StpType();
	            sourceSTP.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
	            sourceSTP.setLocalId("DJ-1");
				sourceSTP.setLabels(null);
            evt.setSourceSTP(sourceSTP);
            evt.setEro(null);
				StpType destSTP = new StpType();
				destSTP.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
				destSTP.setLocalId("SE-1");
				destSTP.setLabels(null);
			evt.setDestSTP(destSTP);
			evt.setMtu(null);
			evt.setBurstsize(null);
			evt.setSourceVLAN(1780);
            evt.setDestVLAN(1780);
            */
            
            EthernetVlanType evt = new EthernetVlanType();
            evt.setCapacity(200);
	            StpType sourceSTP = new StpType();
	            sourceSTP.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
	            sourceSTP.setLocalId("DJ-1");
				sourceSTP.setLabels(null);
            evt.setSourceSTP(sourceSTP);
            evt.setEro(null);
				StpType destSTP = new StpType();
				destSTP.setNetworkId("urn:ogf:network:krlight.net:2012:ets");
				destSTP.setLocalId("SE-1");
				destSTP.setLabels(null);
			evt.setDestSTP(destSTP);
			evt.setMtu(null);
			evt.setBurstsize(null);
			evt.setSourceVLAN(1780);
            evt.setDestVLAN(1780);
            com.netmng.websvc.soap.svc.services.point2point.ObjectFactory of = new com.netmng.websvc.soap.svc.services.point2point.ObjectFactory();
            JAXBElement<EthernetVlanType> evts = of.createEvts(evt);
            
            /*criteria.getAny().add(evt);*/																
            criteria.getAny().add(evts);
    		criteria.setVersion(null);	
            
            reserve(cid, gid, description, criteria);           
            
        /*} catch (ServiceException ex) {
        	System.out.println("=====>> ServiceException : ");
        	ex.printStackTrace();
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
        } catch (JAXBException ex) {
        	System.out.println("=====>> JAXBException : ");
        	ex.printStackTrace();
            /*Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
        } catch (IOException ex) {
        	System.out.println("=====>> IOException : ");
        	ex.printStackTrace();
            /*Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
        } catch (ParserConfigurationException ex) {
        	System.out.println("=====>> ParserConfigurationException : ");
        	ex.printStackTrace();
            /*Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
        } catch (SAXException ex) {
        	System.out.println("=====>> SAXException : ");
        	ex.printStackTrace();
            /*Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);*/
        }
    	/*Provider provider = new Provider();
    	
    	Reserve param = new Reserve();
    	param.setCorrelationId("gnos10");
    	param.setReplyTo("112.216.233.234");
    	param.setRequesterNSA("gnos1");
    	param.setProviderNSA("kisti");
    	param.setGlobalReservationId("gnos");
    	param.setConnectionId("urn:uuid:aaaa1111-aaaa-aaaa-aaaa-aaaaaaaaaaaa");
    	GregorianCalendar start = new GregorianCalendar();
    	start.set(2012, 4, 1);
		param.setStartTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(start));
		GregorianCalendar end = new GregorianCalendar();
    	end.set(2012, 5, 1);
    	param.setEndTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(end));
    	//param.setDuration(DatatypeFactory.newInstance().newDuration(true, 1, 1, 1, 1, 1, 1));
    	//param.setDesired(desired);
    	//param.setMinimum(minimum);
    	//param.setMaximum(maximum);
    	param.setDirectionality(DirectionalityType.BIDIRECTIONAL);
    	param.setSourceStpId("krlight.ets:ps-80, krlight.ets:ps-81, krlight.ets:ps-82, krlight.ets:ps-83");
    	param.setDestStpId("krlight.ets:chi-80, krlight.ets:chi-81, krlight.ets:chi-82, krlight.ets:chi-83");
    	
    	System.out.println(provider.reserve(param));*/
    	/*try{
    		System.out.println(provider.reserve(param));
    	}catch(ServiceExceptionType set){
    		
    	}*/
       
    	/*
        Provision param = new Provision();

        param.setCorrelationId("gnos1");
        param.setReplyTo("112.216.233.235");
        
        param.setRequesterNSA("gnos1");
        param.setProviderNSA("kisti");
        param.setConnectionId("urn:uuid:1234 ");
        
        System.out.println(provider.provision(param));
        */
    	/*
    	Release param = new Release();

        param.setCorrelationId("gnos1");
        param.setReplyTo("112.216.233.235");
        
        param.setRequesterNSA("gnos1");
        param.setProviderNSA("kisti");
        param.setConnectionId("urn:uuid:1234 ");
        
        System.out.println(provider.release(param));
        */
    	/*
    	Terminate param = new Terminate();

        param.setCorrelationId("gnos1");
        param.setReplyTo("112.216.233.235");
        
        param.setRequesterNSA("gnos1");
        param.setProviderNSA("kisti");
        param.setConnectionId("urn:uuid:1234 ");
        
        System.out.println(provider.terminate(param));
        */
    	/*
    	Query param = new Query();
    	
    	param.setCorrelationId("gnos3");
        param.setReplyTo("112.216.233.235");
        param.setRequesterNSA("gnos3");
        param.setProviderNSA("kisti");
        param.setOperation(QueryOperationType.SUMMARY);
        
        //List<String> connectionId = new ArrayList<String>();
        //connectionId.add("urn:uuid:aaaa1111-aaaa-aaaa-aaaa-aaaaaaaaaaaa");
        //param.setConnectionId(connectionId);
        
        //List<String> globalReservationId = new ArrayList<String>();
        //globalReservationId.add("gnos");
        //param.setGlobalReservationId(globalReservationId);
        System.out.println(provider.query(param));
        */
    	/*
    	QueryConfirmed param = new QueryConfirmed();
    	param.setCorrelationId("gnos2");
        param.setRequesterNSA("gnos2");
        param.setProviderNSA("kisti");
        System.out.println(provider.queryConfirmed(param));
        */
    	/*
    	QueryFailed param = new QueryFailed();
    	
    	param.setCorrelationId("gnos2");
        param.setRequesterNSA("gnos2");
        param.setProviderNSA("kisti");
        param.setErrorId("error01");
        param.setErrorText("아직 준비중입니다.");

        System.out.println(provider.queryFailed(param));
        */
    }
	
	private static void reserve(javax.xml.ws.Holder<java.lang.String> connectionId, 
								java.lang.String globalReservationId, 
								java.lang.String description, 
								com.netmng.websvc.soap.param.types.ReservationRequestCriteriaType criteria
								) throws	/*ServiceException,*/ 
											JAXBException, 
											IOException, 
											ParserConfigurationException, 
											SAXException, 
											com.netmng.websvc.soap.param._interface.ServiceException,
											com.netmng.websvc.soap.svc.provider.ServiceException {
		com.netmng.websvc.soap.svc.provider.ConnectionServiceProvider service = new com.netmng.websvc.soap.svc.provider.ConnectionServiceProvider();
		com.netmng.websvc.soap.svc.provider.ConnectionProviderPort port = service.getConnectionServiceProviderPort();
      
        Map<String, Object> ctx = ((BindingProvider) port).getRequestContext();
        ctx.put(JAXWSProperties.HTTP_CLIENT_STREAMING_CHUNK_SIZE, 8192);
        /*ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://localhost:8084/NSI_v2.9.1/ConnectionServiceProvider");*/
        ctx.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://nsi2.kisti.re.kr/gnos/ConnectionServiceProvider");
        CommonHeaderType cht = new CommonHeaderType();
        
        String coid = "urn:uuid:" + UUID.randomUUID().toString();
        cht.setCorrelationId(coid);
        cht.setProtocolVersion("http://schemas.ogf.org/nsi/2013/07/connection/provider");
        cht.setProviderNSA("urn:ogf:network:nsa:krlight_prov.test:2012:nsa");
        cht.setRequesterNSA("urn:ogf:network:nsa:krlight_req.test:2012:nsa");
        /*cht.setReplyTo("http://127.0.0.1:8084/NSI_v2.9.1_Requester/ConnectionServiceRequester");*/
        cht.setReplyTo("http://112.216.233.234:8787/SC_Requester/ConnectionServiceRequester");
        
        /*com.netmng.websvc.soap.svc.header.ObjectFactory chtOF = new com.netmng.websvc.soap.svc.header.ObjectFactory();
        JAXBElement<CommonHeaderType> chtElement = chtOF.createNsiHeader(cht);
        System.out.println("=====>> f");
        java.io.StringWriter sw = new java.io.StringWriter();
        JAXBContext jaxbContext = JAXBContext.newInstance(CommonHeaderType.class);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        System.out.println("=====>> g");
        marshaller.marshal(chtElement, sw);
        sw.close();
        System.out.println("=====>> h");
        InputStream is = new ByteArrayInputStream(sw.toString().getBytes("UTF-8"));
        System.out.println("=====>> i");
        DocumentBuilderFactory docBuildFact = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuild = docBuildFact.newDocumentBuilder();
        Document doc = docBuild.parse(is);
        System.out.println("=====>> j");*/
        com.netmng.websvc.soap.svc.header.ObjectFactory chtOF = new com.netmng.websvc.soap.svc.header.ObjectFactory();
        JAXBElement<CommonHeaderType> chtElement = chtOF.createNsiHeader(cht);
        java.io.StringWriter sw = new java.io.StringWriter();
        JAXBContext jaxbContext = JAXBContext.newInstance(CommonHeaderType.class);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        
        /*marshaller.setProperty(	CharacterEscapeHandler.class.getName(),
        						new CharacterEscapeHandler(){
									@Override
									public void escape(char[] ac, int i, int j, boolean flag, Writer writer) throws IOException {
										writer.write(ac, i, j );						
									}
                    			}
        					);*/
        
        marshaller.marshal(chtElement, sw);
        System.out.println("=====>> sw.toString()="+sw.toString());
        sw.close();
        InputStream is = new ByteArrayInputStream(sw.toString().getBytes("UTF-8"));
        DocumentBuilderFactory docBuildFact = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuild = docBuildFact.newDocumentBuilder();
        Document doc = docBuild.parse(is);
        
        
        
        /*com.netmng.websvc.soap.param.types.ObjectFactory criteriaOF = new com.netmng.websvc.soap.param.types.ObjectFactory();
        com.netmng.websvc.soap.param.types.ReserveType reserveType = new com.netmng.websvc.soap.param.types.ReserveType();
        reserveType.setGlobalReservationId(globalReservationId);
        reserveType.setDescription(description);
        reserveType.setConnectionId(connectionId);
        reserveType.setConnectionId("urn:uuid:" + UUID.randomUUID().toString());
        reserveType.setCriteria(criteria);
        JAXBElement<ReserveType> reserveTypeElement = criteriaOF.createReserve(reserveType);
        XMLContext xmlCtx = new XMLContext();
        xmlCtx.addClass(ReserveType.class);
        
        if(reserveTypeElement==null)	System.out.println("=====>> reserveTypeElement is null");
        else							System.out.println("=====>> reserveTypeElement is not null");
        
        java.io.StringWriter swReserveType = new java.io.StringWriter();
        JAXBContext jaxbContextReserveType = JAXBContext.newInstance(ReserveType.class);
        
        if(jaxbContextReserveType==null)	System.out.println("=====>> jaxbContextReserveType is null");
        else								System.out.println("=====>> jaxbContextReserveType is not null");
        
        //Marshaller marshallerReserveType = jaxbContextReserveType.createMarshaller();
        Marshaller marshallerReserveType = new Marshaller(swReserveType);
        
        org.exolab.castor.xml.Marshaller marshallerReserveType = xmlCtx.createMarshaller();
        marshallerReserveType.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
        marshallerReserveType.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        System.out.println("=====>> marshal");
        marshallerReserveType.marshal(reserveTypeElement, swReserveType);
        marshallerReserveType.setWriter(swReserveType); 
        marshallerReserveType.marshal(reserveType); 
        System.out.println("=====>> swReserveType.toString()="+swReserveType.toString());*/
        
        
        
        
        if(port==null)
        	System.out.println("====>> port is null");
        else
        	System.out.println("====>> port is not null");
        
        /*WSBindingProvider bp = (WSBindingProvider) port;
        //bp.setOutboundHeaders(cht);
        
        bp.setOutboundHeaders(
                // simple string value as a header, like <simpleHeader>stringValue</simpleHeader>
                Headers.create(doc.getDocumentElement()));*/
        
        
        System.out.println("=====>> connectionId="+connectionId);
        System.out.println("=====>> globalReservationId="+globalReservationId);
        System.out.println("=====>> description="+description);
        /*((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://203.253.235.19:8084/NSI_v2.9.1/ConnectionServiceProvider");*/
        ((BindingProvider)port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, "http://nsi2.kisti.re.kr/gnos/ConnectionServiceProvider");

        if(criteria==null)
        	System.out.println("====>> criteria is null");
        else
        	System.out.println("====>> criteria is not null");
        
        
        port.reserve(null, globalReservationId, description, criteria);
        //port.reserve(connectionId, globalReservationId, description, criteria);
        //port.reserve(new Holder("999"), null, null, null);
        
        
        System.out.println("=====>> port.reserve finished!!");
    }
}
