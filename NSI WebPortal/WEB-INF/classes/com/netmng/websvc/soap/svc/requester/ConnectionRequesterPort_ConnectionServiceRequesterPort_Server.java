
package com.netmng.websvc.soap.svc.requester;

import java.util.ArrayList;
import javax.xml.ws.Endpoint;
import org.springframework.beans.factory.annotation.Value;

import com.netmng.websvc.rest.RESTClient;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.ClientErrorException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-09-16T13:24:45.285+09:00
 * Generated source version: 2.7.6
 * 
 */
 
public class ConnectionRequesterPort_ConnectionServiceRequesterPort_Server{

	@Value("#{netmngConfig['nsa.replyTo']}")
	private String reply_to;
	
    protected ConnectionRequesterPort_ConnectionServiceRequesterPort_Server() throws java.lang.Exception {
        System.out.println("Starting Server");
        
        Object implementor = new ConnectionRequesterPortImpl();
        String address = (new com.netmng.util.PropUtil()).getProp("nsa.replyTo");
        System.out.println("address="+address);
        Endpoint.publish(address, implementor);
    }
    
    public static void main(String args[]) throws java.lang.Exception {
    	/*client c = new client();*/
    	RESTClient c = new RESTClient();
    	//c.intraLink("http://112.216.233.235:7080/netmng/upload/dynamicKL_Intra.owl");
    	//c.interLink("http://112.216.233.235:7080/netmng/upload/interTopology/master.xml");
    	
    	c.setEvent();
    	
    	/*String a = "2013-12-31 11:40:00";
    	System.out.println(a.replaceAll(" ", "&"));*/
    	
    	/*String srcNetworkId = "urn:ogf:network:krlight.net:2013:nsa";
        String srcLocalId = "urn:ogf:network:krlight.net:2013:bi-krlight-gloriad";
        String destNetworkId = "urn:ogf:network:krlight.net:2013:nsa";
        String destLocalId = "urn:ogf:network:krlight.net:2013:bi-ps";
        String startTime = "2013-09-30 10:10:00";
        String endTime = "2013-10-31 10:10:00";
        
        HashMap<Integer, String> residualBwMap = c.getResidualBw(srcNetworkId, srcLocalId, destNetworkId, destLocalId, startTime, endTime);
        
        int residualBw = residualBwMap.keySet().iterator().next();
        String unit = residualBwMap.get(residualBw);
        System.out.println("Residual Bandwidth : " + residualBw + "(" + unit + ")");*/
    	
        /*new ConnectionRequesterPort_ConnectionServiceRequesterPort_Server();
        System.out.println("Server ready...");
        Thread.sleep(5 * 60 * 1000); 
        System.out.println("Server exiting");
        System.exit(0);*/
    }
}
