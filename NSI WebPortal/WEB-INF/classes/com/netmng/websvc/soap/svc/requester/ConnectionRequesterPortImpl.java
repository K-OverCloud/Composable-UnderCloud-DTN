
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.netmng.websvc.soap.svc.requester;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPHeaderElement;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPMessageContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.netmng.util.StrUtil;
import com.netmng.websvc.soap.param.types.GenericAcknowledgmentType;
import com.netmng.websvc.soap.param.types.QueryNotificationConfirmedType;
import com.netmng.websvc.soap.svc.Provider;
import com.netmng.websvc.soap.svc.types.ServiceExceptionType;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-09-16T13:24:45.239+09:00
 * Generated source version: 2.7.6
 * 
 */

@javax.jws.WebService(
                      serviceName = "ConnectionServiceRequester",
                      portName = "ConnectionServiceRequesterPort",
                      targetNamespace = "http://schemas.ogf.org/nsi/2013/07/connection/requester",
                      wsdlLocation = "http://nsi2.kisti.re.kr:80/ConnectionServiceRequester?wsdl",
                      endpointInterface = "com.netmng.websvc.soap.svc.requester.ConnectionRequesterPort")
@HandlerChain(file="handler_chain.xml")

                      
public class ConnectionRequesterPortImpl implements ConnectionRequesterPort {

    private static final Logger LOG = Logger.getLogger(ConnectionRequesterPortImpl.class.getName());
    
    @Resource
    private WebServiceContext webServiceContext;
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveConfirmed(java.lang.String  connectionId ,)java.lang.String  globalReservationId ,)java.lang.String  description ,)org.ogf.schemas.nsi._2013._07.connection.types.ReservationConfirmCriteriaType  criteria )*
     */
    public void reserveConfirmed(	java.lang.String connectionId,
    								java.lang.String globalReservationId,
    								java.lang.String description,
    								com.netmng.websvc.soap.param.types.ReservationConfirmCriteriaType criteria
    							) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() : connectionId="+connectionId);
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() : globalReservationId="+globalReservationId);
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() : description="+description);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() : state will change from Reserve Start to Reserve Held");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateReserveState("ReserveHeld", "Released", "Created", "Inactive", "ReserveConfirmed", connectionId); 
        	/*Thread.sleep(1000*60);*/
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveFailed(java.lang.String  connectionId ,)org.ogf.schemas.nsi._2013._07.connection.types.ConnectionStatesType  connectionStates ,)org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void reserveFailed(	java.lang.String connectionId,
    							com.netmng.websvc.soap.param.types.ConnectionStatesType connectionStates,
    							com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException
    						) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveFailed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveFailed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveFailed() : connectionId="+connectionId);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveConfirmed() : state will change from Reserve Start to Reserve Failed");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateReserveState("ReserveFailed", "Released", "Created", "Inactive", "ReserveFailed", connectionId);
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveFailed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveCommitConfirmed(java.lang.String  connectionId )*
     */
    public void reserveCommitConfirmed(java.lang.String connectionId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveCommitConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitConfirmed() : connectionId="+connectionId);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitConfirmed() : state will change from Reserve Held to Reserve Start");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateReserveCommit("ReserveStart", "Released", "Created", "Inactive", connectionId);
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveCommitFailed(java.lang.String  connectionId ,)org.ogf.schemas.nsi._2013._07.connection.types.ConnectionStatesType  connectionStates ,)org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void reserveCommitFailed(java.lang.String connectionId,
    								com.netmng.websvc.soap.param.types.ConnectionStatesType connectionStates,
    								com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException
    								) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveCommitFailed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitFailed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitFailed() : connectionId="+connectionId);        
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitFailed() : state will change from Reserve Held to Reserve Start");

        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateReserveState("ReserveStart", "Released", "Created", "Inactive", "ReserveCommitedFailed", connectionId);        
	    } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveCommitFailed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveAbortConfirmed(java.lang.String  connectionId )*
     */
    public void reserveAbortConfirmed(java.lang.String connectionId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveAbortConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveAbortConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveAbortConfirmed() : connectionId="+connectionId);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveAbortConfirmed() : state will change from Reserve Held to Reserve Start");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateReserveState("ReserveStart", "Released", "Created", "Inactive", "ReserveAbortedConfirmed", connectionId); 
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveAbortConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#provisionConfirmed(java.lang.String  connectionId )*
     */
    public void provisionConfirmed(java.lang.String connectionId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation provisionConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.provisionConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.provisionConfirmed() : connectionId="+connectionId);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.provisionConfirmed() : state will change from Released to Provisioned");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateProvisionState("Provisioned", "ProvisionConfirmed", connectionId); 
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.provisionConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#releaseConfirmed(java.lang.String  connectionId )*
     */
    public void releaseConfirmed(java.lang.String connectionId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation releaseConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.releaseConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.releaseConfirmed() : connectionId="+connectionId);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.releaseConfirmed() : state will change from Provisioned to Released");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateProvisionState("Released", "ReleaseConfirmed", connectionId); 
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.releaseConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#terminateConfirmed(java.lang.String  connectionId )*
     */
    public void terminateConfirmed(java.lang.String connectionId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation terminateConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.terminateConfirmed() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.terminateConfirmed() : connectionId="+connectionId);
        try {
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.updateTerminateState(connectionId); 
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.terminateConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    
    
    
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#querySummaryConfirmed(java.util.List<org.ogf.schemas.nsi._2013._07.connection.types.QuerySummaryResultType>  reservation )*
     */
    public void querySummaryConfirmed(java.util.List<com.netmng.websvc.soap.param.types.QuerySummaryResultType> reservation) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation querySummaryConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.querySummaryConfirmed() ==============================================");
        try {
        	com.netmng.vo.QueryResult.queryResultResv = reservation;
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.querySummaryConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#querySummaryFailed(org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void querySummaryFailed(com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation querySummaryFailed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.querySummaryFailed() ==============================================");
        try {
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.querySummaryFailed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#queryRecursiveConfirmed(java.util.List<org.ogf.schemas.nsi._2013._07.connection.types.QueryRecursiveResultType>  reservation )*
     */
    public void queryRecursiveConfirmed(java.util.List<com.netmng.websvc.soap.param.types.QueryRecursiveResultType> reservation) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation queryRecursiveConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.queryRecursiveConfirmed() ==============================================");
        try {
        	com.netmng.vo.QueryResult.queryResultRecursive = reservation;
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.queryRecursiveConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#queryRecursiveFailed(org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void queryRecursiveFailed(com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation queryRecursiveFailed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.queryRecursiveFailed() ==============================================");
        try {
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.queryRecursiveFailed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#queryNotificationConfirmed(org.ogf.schemas.nsi._2013._07.connection.types.QueryNotificationConfirmedType  queryNotificationConfirmed )*
     */
    public GenericAcknowledgmentType queryNotificationConfirmed(QueryNotificationConfirmedType queryNotificationConfirmed) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation queryNotificationConfirmed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.queryNotificationConfirmed() ==============================================");
        try {
        	com.netmng.vo.QueryResult.queryResultNotification = queryNotificationConfirmed;
            //com.netmng.websvc.soap.param.types.GenericAcknowledgmentType _return = null;
        	com.netmng.websvc.soap.param.types.GenericAcknowledgmentType _return = new com.netmng.websvc.soap.param.types.GenericAcknowledgmentType();
            return _return;
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.queryNotificationConfirmed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#queryNotificationFailed(org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void queryNotificationFailed(ServiceExceptionType serviceException) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation queryNotificationFailed");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.queryNotificationFailed() ==============================================");
        try {
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.queryNotificationFailed() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    

    
    
    
    
    
    
    
    
    


    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#error(org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void error(com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation error");
        System.out.println(serviceException);
        try {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.error() ==============================================");        	
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#messageDeliveryTimeout(java.lang.String  connectionId ,)int  notificationId ,)javax.xml.datatype.XMLGregorianCalendar  timeStamp ,)java.lang.String  correlationId )*
     */
    public void messageDeliveryTimeout(	java.lang.String connectionId,
    									int notificationId,
    									javax.xml.datatype.XMLGregorianCalendar timeStamp,
    									java.lang.String correlationId) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation messageDeliveryTimeout");
        System.out.println(connectionId);
        System.out.println(notificationId);
        System.out.println(timeStamp);
        System.out.println(correlationId);
        try {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.messageDeliveryTimeout() ==============================================");        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.messageDeliveryTimeout(connectionId, notificationId, timeStamp, "messageDeliveryTimeout", ""); 
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#dataPlaneStateChange(java.lang.String  connectionId ,)int  notificationId ,)javax.xml.datatype.XMLGregorianCalendar  timeStamp ,)org.ogf.schemas.nsi._2013._07.connection.types.DataPlaneStatusType  dataPlaneStatus )*
     */
    public void dataPlaneStateChange(	java.lang.String connectionId,
    									int notificationId,
    									javax.xml.datatype.XMLGregorianCalendar timeStamp,
    									com.netmng.websvc.soap.param.types.DataPlaneStatusType dataPlaneStatus
    								) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation dataPlaneStateChange");
        System.out.println(connectionId);
        System.out.println(notificationId);
        System.out.println(timeStamp);
        System.out.println(dataPlaneStatus);
        try {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.dataPlaneStateChange() ==============================================");        	
        	int iVersion = dataPlaneStatus.getVersion();
        	String sDataPlane = "";
        	if(dataPlaneStatus.isActive())
        		sDataPlane = "Active";
        	else
        		sDataPlane = "Inactive";
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.dataPlaneStateChange(connectionId, notificationId, timeStamp, "dataPlaneStateChange", "", iVersion, sDataPlane); 
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }

    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#errorEvent(java.lang.String  connectionId ,)int  notificationId ,)javax.xml.datatype.XMLGregorianCalendar  timeStamp ,)org.ogf.schemas.nsi._2013._07.connection.types.EventEnumType  event ,)org.ogf.schemas.nsi._2013._07.framework.types.TypeValuePairListType  additionalInfo ,)org.ogf.schemas.nsi._2013._07.framework.types.ServiceExceptionType  serviceException )*
     */
    public void errorEvent(	java.lang.String connectionId,
    						int notificationId, 
    						javax.xml.datatype.XMLGregorianCalendar timeStamp,
    						com.netmng.websvc.soap.param.types.EventEnumType event,
    						com.netmng.websvc.soap.svc.types.TypeValuePairListType additionalInfo,
    						com.netmng.websvc.soap.svc.types.ServiceExceptionType serviceException) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation errorEvent");
        System.out.println(connectionId);
        System.out.println(notificationId);
        System.out.println(timeStamp);
        System.out.println(event);
        System.out.println(additionalInfo);
        System.out.println(serviceException);
        try {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.errorEvent() ==============================================");        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.errorEvent(connectionId, notificationId, timeStamp, "errorEvent", event.value()); 
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    
    /* (non-Javadoc)
     * @see org.ogf.schemas.nsi._2013._07.connection.requester.ConnectionRequesterPort#reserveTimeout(java.lang.String  connectionId ,)int  notificationId ,)javax.xml.datatype.XMLGregorianCalendar  timeStamp ,)int  timeoutValue ,)java.lang.String  originatingConnectionId ,)java.lang.String  originatingNSA )*
     */
    public void reserveTimeout(	java.lang.String connectionId,
    							int notificationId,
    							javax.xml.datatype.XMLGregorianCalendar timeStamp,
    							int timeoutValue,
    							java.lang.String originatingConnectionId,
    							java.lang.String originatingNSA
    						) throws com.netmng.websvc.soap.param._interface.ServiceException    { 
        LOG.info("Executing operation reserveTimeout");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() ==============================================");
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() : connectionId="+connectionId);
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() : timeoutValue="+timeoutValue);
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() : originatingConnectionId="+originatingConnectionId);
        StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() : originatingNSA="+originatingNSA);
        try {
        	StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() : state will change from Reserve Start to Reserve Timeout");
        	
        	ApplicationContext appContext = new ClassPathXmlApplicationContext("config/spring/spring-app.xml"); 
	        com.netmng.svc.nsa.NsaService nsaService = (com.netmng.svc.nsa.NsaService) appContext.getBean("nsaService"); 
	        nsaService.reserveTimeout(connectionId, notificationId, timeStamp, "reserveTimeout", ""); 
        } catch (java.lang.Exception ex) {
            StrUtil.sysPrint("ConnectionRequesterPortImpl.reserveTimeout() Exception =================================");
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new org.ogf.schemas.nsi._2013._07.connection._interface.ServiceException("serviceException...");
    }
    

}
